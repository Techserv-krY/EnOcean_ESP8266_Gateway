#
#https://github.com/Techserv-krY/EnOcean_ESP8266_Gateway/wiki/New-way-to-split-Telegram-and-check-and-cut-Multitelegram-and-Response-in-Node-Red
#Check response telegram / crc check / send out ( shield oder device ) to mysql
#
// Funktion zum Extrahieren und Parsen von Nachrichten aus Rohdaten mit Hilfe von Rekursion
function extractAndParseMessages(telegram, currentIndex, messages) {
    // Wenn der aktuelle Index größer oder gleich der Datenlänge ist, geben die Nachrichten zurück
    if (currentIndex >= telegram.length) {
        return messages;
    }

    // Suche den Start der Nachricht
    const messageStart = telegram.findIndex((byte, index) => byte === 0x55 && index >= currentIndex);

    // Wenn keine Nachricht gefunden wurde, gib die Nachrichten zurück
    if (messageStart === -1) {
        return messages;
    }

    // Extrahiere die relevanten Teile des Telegramms (einschließlich des Sync-Bytes im Header)
    const header = telegram.slice(messageStart, messageStart + 5);
    const dataLength = (header[1] << 8) | header[2];
    const optionalLength = header[3];
    const messageEnd = messageStart + 6 + dataLength + optionalLength;

    const dataAndOptionalData = telegram.slice(messageStart + 6, messageEnd);
    const data = dataAndOptionalData.slice(0, dataLength);
    const optionalData = dataAndOptionalData.slice(dataLength, dataLength + optionalLength);

    const crc8Header = telegram[messageStart + 5];
    const crc8Data = telegram[messageEnd];

    // Prüfe, ob der Header-CRC gültig ist (unter Ausschluss des Sync-Bytes)
    const headerCrcOk = crc8(header.slice(1)) === crc8Header;

    // Prüfe, ob der Daten-CRC gültig ist
    const dataCrcOk = crc8(dataAndOptionalData) === crc8Data;

    if (!headerCrcOk || !dataCrcOk) {
        node.warn("Error condition reached");
        const crcErrors = [];
        if (!headerCrcOk) crcErrors.push("header");
        if (!dataCrcOk) crcErrors.push("data");

        const errorMessage = `Wrong CRC for ${crcErrors.join(" and ")} in telegram: ${JSON.stringify(telegram.slice(messageStart, messageEnd + 1))}. Raw data: ${JSON.stringify(telegram)}. CRC comparison: header - ${crc8Header} ${headerCrcOk ? '=' : '≠'} ${crc8(header.slice(1))}, data - ${crc8Data} ${dataCrcOk ? '=' : '≠'} ${crc8(dataAndOptionalData)}`;
        node.error(errorMessage);
        // Continue with the next message
        return extractAndParseMessages(telegram, messageStart + 1, messages);
    }

    // Erstelle das geparste Telegramm
    const parsedTelegram = {
        header,
        dataLength,
        optionalLength,
        packetType: header[4],
        data,
        optionalData,
        crc8Header,
        headerCrcOk,
        crc8Data,
        dataCrcOk,
    };

    // Rufe die Funktion rekursiv auf, um weitere Nachrichten zu extrahieren und zu parsen
    return extractAndParseMessages(telegram, messageEnd + 1, [...messages, parsedTelegram]);
}


// CRC-8 Funktion zur Berechnung der Prüfsumme
function crc8(data) {
    const POLYNOM = 0x07;
    let crc = 0;

    // Berechne die CRC-8 Prüfsumme
    for (const byte of data) {
        crc ^= byte;
        for (let i = 0; i < 8; i++) {
            const carry = crc & 0x80;
            crc = (crc << 1) & 0xFF;
            if (carry) {
                crc ^= POLYNOM;
            }
        }
    }

    return crc;
}


// Funktion zum Senden des geparsten Telegramms
function send_out(parsedTelegram, ID) {

    const { dataLength, data, optionalData } = parsedTelegram;

    let newMsg = { ID: ID };
    newMsg.payload = parsedTelegram

    // Überprüfe, ob ein neuer Shield gefunden wurde. Wenn ja, füge ihn in SQL ein, sonst wähle aus
    if (data[0] === 0x00 && data[1] === 0xff) {
        let device = Buffer.from(data.slice(1), "hex").toString("hex");
        newMsg.topic = "INSERT IGNORE INTO `node_eno_shields` (`created`, `modified`, `shield`) VALUES ( now(), now(), '" + device + "'); select * from `node_eno_shields` where shield = '" + device + "'";
        newMsg.telegram = { "DeviceID": device, "Data": data, "OptData": optionalData };
    } else { // Wenn ein neues Gerät gefunden wurde, füge es in SQL ein, sonst wähle aus
        let deviceBytes = data.slice((dataLength - 5), -1);
        let device = Buffer.from(deviceBytes, "hex").toString("hex");
        if (deviceBytes[0] !== 0xff && device.length !== 0) { // Länge = Überprüfung für Antwort-Telegramm - wir brauchen sie nicht
            newMsg.topic = "INSERT IGNORE INTO `node_eno_devices` (`created`, `modified`, `deviceid`) VALUES ( now(), now(), '" + device + "'); SELECT `node_eno_devices`.* , `node_eno_shields`.`build`, `node_eno_shields`.`floor`, `node_eno_shields`.`room`, `node_eno_shields`.`ip` FROM `node_eno_devices` INNER JOIN `node_eno_shields` ON `node_eno_devices`.`shield` = `node_eno_shields`.`shield` WHERE `deviceid` = '" + device + "'";
            newMsg.telegram = { "DeviceID": device, "Data": data, "OptData": optionalData };
        } else {
            if (device.length === 0) { // Für Debug-Antwort
                node.warn("Debug Response");
                node.error(parsedTelegram);
                return;
            } else {
                return;
            }
        }
    }
    node.send(newMsg, false);
    return;
}

// Ersetze rawBuffer durch die tatsächlichen Eingangsdaten in deinem Node-RED-Flow
const rawBuffer = msg.payload;

// Extrahiere die Nachrichten aus den Rohdaten
const parsedTelegrams = extractAndParseMessages(rawBuffer, 0, []);

// Verarbeite und sende jede Nachricht separat mit der ursprünglichen msg.id
parsedTelegrams.forEach(parsedTelegram => {
    // Rufe die send_out-Funktion mit dem geparsten Telegram auf
    send_out(parsedTelegram, msg.ID);
});

return;
