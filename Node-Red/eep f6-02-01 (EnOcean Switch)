// Prüfe, ob msg.payload[1] existiert und nicht leer ist
if (!msg.payload[1] || msg.payload[1].length === 0) {
    return;
}

// Extrahiere Gerätedaten aus msg.payload[1][0]
const deviceData = msg.payload[1][0];
const { shield, eep, name, deviceid, wert1, wert2, wert3, wert4, gruppe1, gruppe2, gruppe3, gruppe4, build, floor, room, ip } = deviceData;
if (msg.ID !== shield) {
    return;
}
// Sammle relevante Geräteinformationen
const baseid = shield.slice(0, -2) + Number(deviceData.baseid).toString(16).padStart(2, "0");
const profile = msg.telegram.Data[0];
const rssi = msg.telegram.OptData[5];

if (eep === "f6-02-01"){    
    if (profile === 0xf6) {
        processTelegram();
    }
}    

// Funktion zum Verarbeiten des Telegramms
function processTelegram () {
    const value = msg.telegram.Data[1];
    const status = msg.telegram.Data[6];

    // Konvertiere Wert in binäre Darstellung
    const binaryValue = Number(value, 10).toString(2).padStart(8, "0");
    const binary1 = binaryValue.slice(0, 3);
    const binary2 = binaryValue.slice(4, 7);

    let schalter;
    let zustand;

    // Prüfe, ob der Schalter gedrückt wurde
    if (binaryValue[3] === "1" & status === 0x30) {
        if (binaryValue[2] === "0" & binaryValue[1] === "0") {
            schalter = "AI";
        }
        if (binaryValue[2] === "1" & binaryValue[1] === "0") {
            schalter = "A0";
        }
        if (binaryValue[2] === "0" & binaryValue[1] === "1") {
            schalter = "BI";
        }
        if (binaryValue[2] === "1" & binaryValue[1] === "1") {
            schalter = "B0";
        }
        zustand = "pressed";
        context.set(name, schalter);
    }
    
    // Prüfe, ob der Schalter losgelassen wurde
    if (binaryValue[3] === "0" & status === 0x20) {
        zustand = "released";
        schalter = context.get(name);
    }

    sendTelegram(schalter, zustand);
}

// Funktion zum Senden des Telegramms (telegram_send)
// Diese Funktion speichert die berechneten Werte und Zustände der Jalousie in den globalen Variablen,
// erstellt eine neue Nachricht mit den relevanten Informationen und sendet sie an den nächsten Node.
function sendTelegram(schalter, zustand) {
    let devices = global.get("schalter") || {};
    const devicename = Object.keys(devices);
    
 // Erstelle das 'info'-Objekt mit Geräteinformationen
    const info = {
        "name": name,
        "device": deviceid,
        "baseid": baseid,
        "shield": shield,
        "build": build,
        "floor": floor,
        "room": room,
        "ip": ip
    };
    
// Erstelle das 'sql'-Objekt mit den Werten und Gruppeninformationen
    const sql = {
        "wert1": wert1,
        "wert2": wert2,
        "wert3": wert3,
        "wert4": wert4,
        "gruppe1": gruppe1,
        "gruppe2": gruppe2,
        "gruppe3": gruppe3,
        "gruppe4": gruppe4
    };
    
// Erstelle das 'telegram'-Objekt mit den berechneten Werten und Zuständen der Jalousie
    const telegram = {
        "schalter":schalter,
        "zustand":zustand,
        "time": Date.now(),
        "human_time": new Date().toLocaleString(),
        "status":status,
        "rssi":rssi
    };

 // Kombiniere die erstellten Objekte in das 'save'-Objekt
    const save = { info, sql, telegram };

    // Speichere die berechneten Werte und Zustände in den globalen Variablen
    /* Zusammengefasst aktualisiert dieser Codeabschnitt die globalen Variablen
     * mit den berechneten Werten und Zuständen der Schalter,
     * indem er entweder die vorhandenen Informationen aktualisiert (wenn das Gerät bereits gespeichert ist)
     * oder ein neues Gerät in den globalen Variablen hinzufügt (wenn das Gerät noch nicht gespeichert ist).
     */
    if (devicename.includes(name)) {
        global.set("schalter." + name + "[0]", save);
    } else {
        devices[name] = [save];
        global.set("schalter", devices);
    }

    // Entferne die nicht benötigten Felder aus dem 'telegram'-Objekt für die Nachricht
    const { time: _, human_time: __, ...telegramPayload } = telegram;

    // Setze das Topic und den Payload der Nachricht
    msg.topic = ("/" + build + "/" + floor + "/" + room + "/" + name + "");
    msg.payload = { info, sql, telegram: telegramPayload };

    // Sende die Nachricht an den nächsten Node
    node.send(msg);
}

return;
